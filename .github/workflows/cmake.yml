name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Qt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qtbase5-dev qtdeclarative5-dev
        
    - name: Install ziplib
      run: |
        sudo apt install -y zlib1g zlib1g-dev
        wget -O libzip.gz https://libzip.org/download/libzip-1.10.0.tar.gz
        tar -xvzf libzip.gz
        cd libzip-1.10.0
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
        cd ../..
        
    - name: Install Catch2
      run: |
        git clone https://github.com/catchorg/Catch2.git
        cd Catch2
        cmake -Bbuild -H. -DBUILD_TESTING=OFF
        sudo cmake --build build/ --target install
        
    - name: Install OpenCV dependencies
      run: |
        sudo apt-get update
        sudo apt install -y g++ cmake make git libgtk2.0-dev pkg-config
        wget -O opencv.zip https://github.com/opencv/opencv/archive/4.8.0.zip
        unzip opencv.zip
        mkdir -p build && cd build
        cmake ../opencv-4.8.0
        cmake --build .
        sudo make install
        cd ..
        
    - name: Clear cache
      run: |
        rm -rf /home/runner/work/FABTemplateGenerator/FABTemplateGenerator/build/CMakeCache.txt
        rm -rf /home/runner/work/FABTemplateGenerator/FABTemplateGenerator/build/CMakeFiles/


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build tests
      run: cmake --build ${{github.workspace}}/build --target Test-Containers --config Release

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

