name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Load cache
        id: load-cache
        uses: actions/cache@v3
        with:
          path: |
            build/usr/local/lib/cmake/opencv4/
            build/usr/local/lib/libopencv*
            build/usr/local/lib/cmake/Catch2
            build/usr/local/lib/libCatch2*
            build/usr/local/lib/cmake/libzip
            build/usr/local/lib/libzip*
            build/usr/local/lib/pkgconfig/libzip*
            build/usr/local/include/opencv2
            build/usr/local/include/Catch2
            build/usr/local/include/zip*
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-
          
      - name: Check cache
        id: check-cache
        run: |
          if [[ -d "build/usr/local/include/opencv2" ]]; then
            echo "::set-output name=cache-loaded::true"
          else
            echo "::set-output name=cache-loaded::false"
          fi

      - name: Install package dependencies
        run: |
          # Install Qt dependencies
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev qtdeclarative5-dev

          # Install Gzip dependencies
          sudo apt install -y zlib1g zlib1g-dev

      - name: Install CMake dependencies
        if: steps.check-cache.outputs.cache-loaded != 'true'
        run: |
          echo "Cache not found, installing dependencies..."

          # Install ziplib
          wget -O libzip.gz https://libzip.org/download/libzip-1.10.0.tar.gz
          tar -xvzf libzip.gz
          cd libzip-1.10.0
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../build ..
          make
          make install
          cd ../..
          
          # Install Catch2
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=../build
          sudo cmake --build build/ --target install
          cd ..
          
          # Build and install OpenCV dependencies
          sudo apt-get update
          sudo apt install -y g++ cmake make git libgtk2.0-dev pkg-config
          wget -O opencv.zip https://github.com/opencv/opencv/archive/4.8.0.zip
          unzip opencv.zip
          mkdir -p build && cd build
          cmake -S ../opencv-4.8.0 -B . -D BUILD_TESTS=False -D BUILD_PERF_TESTS=False -DCMAKE_INSTALL_PREFIX=../build
          cmake --build .
          make install
          cd ..
        
      - name: Clear build cache for clean build
        run: rm -rf build/CMakeCache.txt
        
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_PREFIX_PATH=${{ github.workspace }}/build

      - name: Build tests
        run: cmake --build build --target FABTemplateGenerator-Test-Containers --config Release

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Test
        working-directory: build
        run: ctest -C ${{ env.BUILD_TYPE }} --extra-verbose --output-on-failure